# Compilers
RESCOMP = windres.exe
CXX = mingw32-g++.exe

# Paths
# wxWidgets directory (it should contain 'include' and 'lib' subdirectories)
WX = D:\Projects\wxWidgets-3.0.2
# Crypto++ directory that should contain .a file(s) and headers for linking
CRYPTOPP = ..\cryptolib

# Flags
CXXFLAGS = -Wall -std=gnu++11 -pipe -mthreads
RESFLAGS = -J rc -O coff
LDFLAGS = -mthreads

# Binary name
BIN = PasswordKeeper.exe

# Defines
DEFS = __GNUWIN32__ __WXMSW__ wxUSE_UNICODE

# Libraries
# Name of .a file for static linking of crypto++ library
# Debug version (if used) should be called <CRYPTOPPLIB>d.a
CRYPTOPPLIB = crypto

# Debug/release build
ifneq ($(BUILD),debug)
# Release build
override BUILD := release
CXXFLAGS := $(CXXFLAGS) -O2
LDFLAGS := $(LDFLAGS) -s
else
# Debug build
CXXFLAGS := $(CXXFLAGS) -g
DEFS := $(DEFS) __WXDEBUG__
WX_DBGSFX = d
endif

WXINC = $(WX)\lib

# Static/shared build
ifneq ($(STATIC),no)
# Static build
WXINC := $(WXINC)\lib\gcc_lib
LDFLAGS := $(LDFLAGS) -mwindows
# List of win32 libraries, that will be linked
WINLIBS = kernel32 user32 gdi32 winspool comdlg32 advapi32 shell32 ole32 oleaut32 uuid comctl32 wsock32 odbc32
# wx libraries (only unicode versions with u-suffix)
WXLIBS = wxmsw30u wxpng wxjpeg wxtiff wxzlib
else
# Shared build
DEFS := $(DEFS) WXUSINGDLL
WXINC := $(WXINC)\lib\gcc_dll
# wx libraries (only unicode versions with u-suffix)
WXLIBS = wxmsw30u
endif

# Includes
WXINC := $(WX)\include $(WXINC)\mswu$(WX_DBGSFX)
INC = $(WXINC) $(CRYPTOPP) inc
WXLIBINC = $(WXINC)

# Paths
OBJPATH = obj\$(BUILD)
BINPATH = bin\$(BUILD)
$(shell mkdir $(OBJPATH))
$(shell mkdir $(BINPATH))

INC := $(patsubst %,-I%,$(INC))
WXINC := $(patsubst %,-I%,$(WXINC))
DEFS := $(patsubst %,-D%,$(DEFS))
LIBINC = $(patsubst %,-L%,$(WXLIBINC) $(CRYPTOPP))

# Libraries with prefixes and suffixes
WINLIBS := $(patsubst %,-l%,$(WINLIBS))
WXLIBS := $(patsubst %,-l%$(WX_DBGSFX),$(WXLIBS))
CRYPTOPPLIB := $(CRYPTOPPLIB)$(WX_DBGSFX).a
LIBS = $(WXLIBS) $(CRYPTOPPLIB) $(WINLIBS)

VPATH = src $(OBJPATH) $(BINPATH)

# Sources from
SRCS = $(sort $(patsubst src/%,%,$(wildcard src/*.cpp)))

# Resources
RES = $(sort $(wildcard *.rc))
RES := $(RES:.rc=.res)

# Object files
OBJS = $(SRCS:.cpp=.o) $(RES)
OBJRES = $(patsubst %,$(OBJPATH)/%,$(OBJS))

.PHONY: all clean

all: $(BIN)

clean:
	rd /S /Q $(OBJPATH)
	rd /S /Q $(BINPATH)

$(BIN) : $(RES) $(OBJS)
	$(CXX) -o $(BINPATH)\$(BIN) $(OBJRES) $(LDFLAGS) $(LIBINC) $(LIBS)

%.res : %.rc
	$(RESCOMP) $(WXINC) $(RESFLAGS) -i $< -o $(OBJPATH)\$@

%.o : %.cpp
	$(CXX) $(CXXFLAGS) $(DEFS) $(INC) -c $< -o $(OBJPATH)\$@

