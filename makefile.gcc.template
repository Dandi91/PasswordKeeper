# Compilers
RESCOMP = windres.exe
CXX = mingw32-g++.exe

# Paths
# Uncomment and define WX variable for wxWidgets directory (it should contain 'include' and 'lib' subdirectories)
# WX = path\to\wx-widgets
# Uncomment and define CRYPTOPP variable for crypto++ directory that should contain .a file(s) and headers for linking
# CRYPTOPP = path\to\crypto++
# Two-digit version for the wx library names
# WXVER = 30

ifndef WX
	$(error WX variable must be defined. Look at the lines 6 and 7)
endif

ifndef WXVER
	$(error WXVER variable must be defined. Look at the lines 10 and 11)
endif

ifndef CRYPTOPP
	$(error CRYPTOPP variable must be defined. Look at the lines 8 and 9)
endif

# Flags
CXXFLAGS = -Wall -std=gnu++11 -pipe -mthreads
RESFLAGS = -J rc -O coff
LDFLAGS = -mthreads -mwindows

# Binary name
BIN = PasswordKeeper.exe

# Defines
DEFS = __GNUWIN32__ __WXMSW__ wxUSE_UNICODE

# Crypto++ Libraries
# Name of crypto++ static library
CRYPTOPPLIB = libcryptopp.a
# Name of debug vervion of crypto++ static library
CRYPTOPPLIB_DBG = libcryptoppd.a
# Whether to use the debug version, or always link the release one
USE_CRYPTODEBUG = 0

# Debug/release build
ifneq ($(BUILD),debug)
	# Release build
	override BUILD := release
	CXXFLAGS := $(CXXFLAGS) -O2
	LDFLAGS := $(LDFLAGS) -s
else
	# Debug build
	CXXFLAGS := $(CXXFLAGS) -g
	DEFS := $(DEFS) __WXDEBUG__
	WX_DBGSFX = d
endif

WXINC = $(WX)\lib

# Static/shared build
ifneq ($(STATIC),no)
	# Static build
	override STATIC := yes
	WXINC := $(WXINC)\gcc_lib
	# List of win32 libraries that will be linked
	WINLIBS = kernel32 user32 gdi32 winspool comdlg32 advapi32 shell32 shlwapi ole32 oleaut32 uuid comctl32 wsock32 odbc32 version
else
	# Shared build
	DEFS := $(DEFS) WXUSINGDLL
	WXINC := $(WXINC)\gcc_dll
endif

# wx libraries (replace 'd' suffix with $(WX_DBGSFX) and version with $(WXVER))
WXLIBS = wxmsw$(WXVER)u$(WX_DBGSFX)_core wxbase$(WXVER)u$(WX_DBGSFX) wxbase$(WXVER)u$(WX_DBGSFX)_net wxjpeg$(WX_DBGSFX) wxpng$(WX_DBGSFX) wxtiff$(WX_DBGSFX) wxzlib$(WX_DBGSFX)

# Includes
WXLIBINC := $(WXINC)
WXINC := $(WX)\include $(WXINC)\mswu$(WX_DBGSFX)
INC = $(WXINC) $(CRYPTOPP) inc

# Paths
OBJPATH = obj\$(BUILD)
BINPATH = bin\$(BUILD)

INC := $(patsubst %,-I%,$(INC))
WXINC := $(patsubst %,-I%,$(WXINC))
DEFS := $(patsubst %,-D%,$(DEFS))
LIBINC = $(patsubst %,-L%,$(WXLIBINC))

# Libraries with prefixes and suffixes
WINLIBS := $(patsubst %,-l%,$(WINLIBS))
WXLIBS := $(patsubst %,-l%,$(WXLIBS))
ifeq ($(USE_CRYPTODEBUG),1)
	CRYPTOPPLIB := $(CRYPTOPP)\$(CRYPTOPPLIB_DBG)
else
	CRYPTOPPLIB := $(CRYPTOPP)\$(CRYPTOPPLIB)
endif
LIBS = $(WXLIBS) $(CRYPTOPPLIB) $(WINLIBS)

VPATH = src $(OBJPATH) $(BINPATH)

# Sources
SRCS = $(sort $(patsubst src/%,%,$(wildcard src/*.cpp)))

# Resources
RES = $(sort $(wildcard *.rc))
RES := $(RES:.rc=.res)

# Object files
OBJS = $(SRCS:.cpp=.o) $(RES)
OBJRES = $(patsubst %,$(OBJPATH)/%,$(OBJS))

.PHONY: all clean

all: $(BIN)

clean:
	rd /S /Q $(OBJPATH)
	rd /S /Q $(BINPATH)

$(OBJPATH) $(BINPATH) :
	mkdir $@

$(BIN) : $(OBJPATH) $(BINPATH) $(RES) $(OBJS)
	$(CXX) -o $(BINPATH)\$(BIN) $(OBJRES) $(LDFLAGS) $(LIBINC) $(LIBS)

%.res : %.rc
	$(RESCOMP) $(WXINC) $(RESFLAGS) -i $< -o $(OBJPATH)\$@

%.o : %.cpp
	$(CXX) $(CXXFLAGS) $(DEFS) $(INC) -c $< -o $(OBJPATH)\$@
